//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// A PowerTransformerEnd is associated with each Terminal of a PowerTransformer.
    ///The impdedance values r, r0, x, and x0 of a PowerTransformerEnd represents a star equivalent as follows
    ///1) for a two Terminal PowerTransformer the high voltage PowerTransformerEnd has non zero values on r, r0, x, and x0 while the low voltage PowerTransformerEnd has zero values for r, r0, x, and x0.
    ///2) for a three Terminal PowerTransformer the three PowerTransformerEnds represents a star equivalent with each leg in the star represented by r, r0, x, and x0 values.
    ///3) for a PowerTransformer with more than three Terminals the PowerTransformerEnd impedance values cannot be used. Instead use the TransformerMeshImpedance or split the transformer into multiple PowerTransformers.
    public class PowerTransformerEnd : TransformerEnd {
        
        /// Magnetizing branch susceptance (B mag).  The value can be positive or negative.
        private System.Single? cim_b;
        
        private const bool isBMandatory = false;
        
        private const string _bPrefix = "cim";
        
        /// Zero sequence magnetizing branch susceptance.
        private System.Single? cim_b0;
        
        private const bool isB0Mandatory = false;
        
        private const string _b0Prefix = "cim";
        
        /// Kind of connection.
        private WindingConnection? cim_connectionKind;
        
        private const bool isConnectionKindMandatory = false;
        
        private const string _connectionKindPrefix = "cim";
        
        /// Magnetizing branch conductance.
        private System.Single? cim_g;
        
        private const bool isGMandatory = false;
        
        private const string _gPrefix = "cim";
        
        /// Zero sequence magnetizing branch conductance (star-model).
        private System.Single? cim_g0;
        
        private const bool isG0Mandatory = false;
        
        private const string _g0Prefix = "cim";
        
        /// Terminal voltage phase angle displacement where 360 degrees are represented with clock hours. The valid values are 0 to 11. For example, for the secondary side end of a transformer with vector group code of 'Dyn11', specify the connection kind as wye with neutral and specify the phase angle of the clock as 11.  The clock value of the transformer end number specified as 1, is assumed to be zero.  Note the transformer end number is not assumed to be the same as the terminal sequence number.
        private System.Int32? cim_phaseAngleClock;
        
        private const bool isPhaseAngleClockMandatory = false;
        
        private const string _phaseAngleClockPrefix = "cim";
        
        /// The power transformer of this power transformer end.
        private PowerTransformer cim_PowerTransformer;
        
        private const bool isPowerTransformerMandatory = false;
        
        private const string _PowerTransformerPrefix = "cim";
        
        /// Resistance (star-model) of the transformer end.
        private System.Single? cim_r;
        
        private const bool isRMandatory = false;
        
        private const string _rPrefix = "cim";
        
        /// Zero sequence series resistance (star-model) of the transformer end.
        private System.Single? cim_r0;
        
        private const bool isR0Mandatory = false;
        
        private const string _r0Prefix = "cim";
        
        /// Normal apparent power rating.
        private System.Single? cim_ratedS;
        
        private const bool isRatedSMandatory = false;
        
        private const string _ratedSPrefix = "cim";
        
        /// Rated voltage: phase-phase for three-phase windings, and either phase-phase or phase-neutral for single-phase windings.
        private System.Single? cim_ratedU;
        
        private const bool isRatedUMandatory = false;
        
        private const string _ratedUPrefix = "cim";
        
        /// Positive sequence series reactance (star-model) of the transformer end.
        private System.Single? cim_x;
        
        private const bool isXMandatory = false;
        
        private const string _xPrefix = "cim";
        
        /// Zero sequence series reactance of the transformer end.
        private System.Single? cim_x0;
        
        private const bool isX0Mandatory = false;
        
        private const string _x0Prefix = "cim";
        
        public virtual float B {
            get {
                return this.cim_b.GetValueOrDefault();
            }
            set {
                this.cim_b = value;
            }
        }
        
        public virtual bool BHasValue {
            get {
                return this.cim_b != null;
            }
        }
        
        public static bool IsBMandatory {
            get {
                return isBMandatory;
            }
        }
        
        public static string BPrefix {
            get {
                return _bPrefix;
            }
        }
        
        public virtual float B0 {
            get {
                return this.cim_b0.GetValueOrDefault();
            }
            set {
                this.cim_b0 = value;
            }
        }
        
        public virtual bool B0HasValue {
            get {
                return this.cim_b0 != null;
            }
        }
        
        public static bool IsB0Mandatory {
            get {
                return isB0Mandatory;
            }
        }
        
        public static string B0Prefix {
            get {
                return _b0Prefix;
            }
        }
        
        public virtual WindingConnection ConnectionKind {
            get {
                return this.cim_connectionKind.GetValueOrDefault();
            }
            set {
                this.cim_connectionKind = value;
            }
        }
        
        public virtual bool ConnectionKindHasValue {
            get {
                return this.cim_connectionKind != null;
            }
        }
        
        public static bool IsConnectionKindMandatory {
            get {
                return isConnectionKindMandatory;
            }
        }
        
        public static string ConnectionKindPrefix {
            get {
                return _connectionKindPrefix;
            }
        }
        
        public virtual float G {
            get {
                return this.cim_g.GetValueOrDefault();
            }
            set {
                this.cim_g = value;
            }
        }
        
        public virtual bool GHasValue {
            get {
                return this.cim_g != null;
            }
        }
        
        public static bool IsGMandatory {
            get {
                return isGMandatory;
            }
        }
        
        public static string GPrefix {
            get {
                return _gPrefix;
            }
        }
        
        public virtual float G0 {
            get {
                return this.cim_g0.GetValueOrDefault();
            }
            set {
                this.cim_g0 = value;
            }
        }
        
        public virtual bool G0HasValue {
            get {
                return this.cim_g0 != null;
            }
        }
        
        public static bool IsG0Mandatory {
            get {
                return isG0Mandatory;
            }
        }
        
        public static string G0Prefix {
            get {
                return _g0Prefix;
            }
        }
        
        public virtual int PhaseAngleClock {
            get {
                return this.cim_phaseAngleClock.GetValueOrDefault();
            }
            set {
                this.cim_phaseAngleClock = value;
            }
        }
        
        public virtual bool PhaseAngleClockHasValue {
            get {
                return this.cim_phaseAngleClock != null;
            }
        }
        
        public static bool IsPhaseAngleClockMandatory {
            get {
                return isPhaseAngleClockMandatory;
            }
        }
        
        public static string PhaseAngleClockPrefix {
            get {
                return _phaseAngleClockPrefix;
            }
        }
        
        public virtual PowerTransformer PowerTransformer {
            get {
                return this.cim_PowerTransformer;
            }
            set {
                this.cim_PowerTransformer = value;
            }
        }
        
        public virtual bool PowerTransformerHasValue {
            get {
                return this.cim_PowerTransformer != null;
            }
        }
        
        public static bool IsPowerTransformerMandatory {
            get {
                return isPowerTransformerMandatory;
            }
        }
        
        public static string PowerTransformerPrefix {
            get {
                return _PowerTransformerPrefix;
            }
        }
        
        public virtual float R {
            get {
                return this.cim_r.GetValueOrDefault();
            }
            set {
                this.cim_r = value;
            }
        }
        
        public virtual bool RHasValue {
            get {
                return this.cim_r != null;
            }
        }
        
        public static bool IsRMandatory {
            get {
                return isRMandatory;
            }
        }
        
        public static string RPrefix {
            get {
                return _rPrefix;
            }
        }
        
        public virtual float R0 {
            get {
                return this.cim_r0.GetValueOrDefault();
            }
            set {
                this.cim_r0 = value;
            }
        }
        
        public virtual bool R0HasValue {
            get {
                return this.cim_r0 != null;
            }
        }
        
        public static bool IsR0Mandatory {
            get {
                return isR0Mandatory;
            }
        }
        
        public static string R0Prefix {
            get {
                return _r0Prefix;
            }
        }
        
        public virtual float RatedS {
            get {
                return this.cim_ratedS.GetValueOrDefault();
            }
            set {
                this.cim_ratedS = value;
            }
        }
        
        public virtual bool RatedSHasValue {
            get {
                return this.cim_ratedS != null;
            }
        }
        
        public static bool IsRatedSMandatory {
            get {
                return isRatedSMandatory;
            }
        }
        
        public static string RatedSPrefix {
            get {
                return _ratedSPrefix;
            }
        }
        
        public virtual float RatedU {
            get {
                return this.cim_ratedU.GetValueOrDefault();
            }
            set {
                this.cim_ratedU = value;
            }
        }
        
        public virtual bool RatedUHasValue {
            get {
                return this.cim_ratedU != null;
            }
        }
        
        public static bool IsRatedUMandatory {
            get {
                return isRatedUMandatory;
            }
        }
        
        public static string RatedUPrefix {
            get {
                return _ratedUPrefix;
            }
        }
        
        public virtual float X {
            get {
                return this.cim_x.GetValueOrDefault();
            }
            set {
                this.cim_x = value;
            }
        }
        
        public virtual bool XHasValue {
            get {
                return this.cim_x != null;
            }
        }
        
        public static bool IsXMandatory {
            get {
                return isXMandatory;
            }
        }
        
        public static string XPrefix {
            get {
                return _xPrefix;
            }
        }
        
        public virtual float X0 {
            get {
                return this.cim_x0.GetValueOrDefault();
            }
            set {
                this.cim_x0 = value;
            }
        }
        
        public virtual bool X0HasValue {
            get {
                return this.cim_x0 != null;
            }
        }
        
        public static bool IsX0Mandatory {
            get {
                return isX0Mandatory;
            }
        }
        
        public static string X0Prefix {
            get {
                return _x0Prefix;
            }
        }
    }
}
